name: Release

# TRIGGER LOGIC: Only run when commits are pushed to main branch
# This ensures the workflow runs once per push, even if multiple commits are pushed together
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

# PERMISSIONS: Grant necessary permissions to GITHUB_TOKEN
permissions:
  contents: write          # Allow reading/writing repository contents
  pull-requests: write     # Allow creating/updating pull requests
  actions: read           # Allow reading workflow information
  packages: write         # Allow publishing to GitHub Container Registry

jobs:
  # setup-and-convert:
  #   name: Setup Environment & Convert Images to AVIF
  #   runs-on: ubuntu-latest
  #   outputs:
  #     conversion_count: ${{ steps.convert-images.outputs.conversion_count }}
    
  #   steps:
  #     # SETUP PHASE: Prepare the environment for image processing
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         # Fetch full history to access all branches for cleanup
  #         fetch-depth: 0
  #         # Use GitHub token for authenticated operations
  #         token: ${{ secrets.GITHUB_TOKEN }}

  #     # CONFIGURATION: Set up Git user for automated commits
  #     - name: Setup Git
  #       run: |
  #         # Configure Git to use custom Melmua bot identity
  #         git config --global user.name "melmua-git-bot"
  #         git config --global user.email "melmua-git-bot@users.noreply.github.com"

  #     # DEPENDENCY INSTALLATION: Install Sharp-cli for reliable AVIF conversion
  #     - name: Install Sharp-cli for AVIF conversion
  #       run: |
  #         # Install Node.js 18 (has excellent Sharp support)
  #         curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
  #         sudo apt-get update
  #         sudo apt-get install -y nodejs
          
  #         # Install sharp-cli globally - most reliable tool for AVIF conversion
  #         npm install -g sharp-cli
          
  #         # Verify installation
  #         echo "Checking Sharp-cli installation..."
  #         which sharp
  #         sharp --version
  #         echo "‚úÖ Sharp-cli ready for AVIF conversion"

  #     # CORE LOGIC: Find and convert all non-AVIF images to AVIF format
  #     - name: Find and convert images to AVIF
  #       id: convert-images
  #       run: |
  #         echo "Starting image conversion process..."
          
  #         # DISCOVERY PHASE: Find all image files that need conversion
  #         # Exclude .avif files to avoid re-processing already converted images
  #         find . -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.webp" -o -iname "*.gif" \) > images_to_convert.txt
          
  #         # TRACKING VARIABLES: Keep track of conversion progress
  #         converted_images=""  # Store mapping of old->new paths for markdown updates
  #         conversion_count=0   # Count successful conversions for conditional logic
          
  #         # CONVERSION LOOP: Process each image file
  #         while IFS= read -r image_path; do
  #           # VALIDATION: Ensure file still exists (safety check)
  #           if [ -f "$image_path" ]; then
  #             # PATH MANIPULATION: Extract directory and filename components
  #             dir=$(dirname "$image_path")           # Get directory path
  #             filename=$(basename "$image_path")     # Get filename with extension
  #             name="${filename%.*}"                  # Remove extension to get base name
              
  #             # TARGET PATH: Create new AVIF path with same location and base name
  #             avif_path="$dir/$name.avif"
              
  #             echo "Converting: $image_path -> $avif_path"
              
  #             # CONVERSION ATTEMPT: Use Sharp-cli for reliable AVIF conversion
  #             # Quality 80 provides good balance between file size and image quality
  #             if sharp -i "$image_path" -o "$avif_path" -f avif -q 80; then
  #               echo "‚úÖ Successfully converted: $image_path"
                
  #               # CLEANUP: Remove original image to save space and avoid duplicates
  #               rm "$image_path"
  #               echo "üóëÔ∏è Deleted original: $image_path"
                
  #               # TRACKING: Store conversion mapping for markdown file updates
  #               if [ -z "$converted_images" ]; then
  #                 converted_images="$image_path|$avif_path"
  #               else
  #                 converted_images="$converted_images\n$image_path|$avif_path"
  #               fi
  #               conversion_count=$((conversion_count + 1))
  #               echo "üîç Debug: conversion_count now = $conversion_count"
  #             else
  #               # ERROR HANDLING: Log failed conversions but continue processing
  #               echo "‚ùå Failed to convert: $image_path"
  #             fi
  #           fi
  #         done < images_to_convert.txt
          
  #         # OUTPUT VARIABLES: Pass data to subsequent steps
  #         echo "üîç Debug: Setting output variables..."
  #         echo "üîç Debug: conversion_count=$conversion_count"
  #         echo "üîç Debug: Writing to GITHUB_OUTPUT..."
  #         echo "conversion_count=$conversion_count" >> $GITHUB_OUTPUT
          
  #         echo "üîç Debug: Creating converted_images.txt..."
  #         echo -e "$converted_images" > converted_images.txt
          
  #         echo "üîç Debug: Checking converted_images.txt content:"
  #         cat converted_images.txt || echo "Failed to read converted_images.txt"
          
  #         echo "üéØ Total images converted: $conversion_count"
  #         echo "‚úÖ Image conversion step completed successfully"
          
  #         # UPLOAD ARTIFACTS: Pass conversion data to next job
  #         echo "üì§ Uploading conversion data for next job..."
          
  #     # Upload conversion data as artifact for next job
  #     - name: Upload conversion data
  #       if: steps.convert-images.outputs.conversion_count > 0
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: conversion-data
  #         path: converted_images.txt
  #         retention-days: 1
          
  #     # CLEANUP: Remove temporary files  
  #     - name: Cleanup temporary files
  #       run: |
  #         echo "üßπ Cleaning up temporary files..."
  #         rm -f images_to_convert.txt
  #         echo "‚úÖ Temporary files cleaned up"

  # update-file-references:
  #   name: Update File References (MD, JSON, YAML)
  #   runs-on: ubuntu-latest
  #   needs: setup-and-convert
  #   if: needs.setup-and-convert.outputs.conversion_count > 0
    
  #   steps:
  #     # SETUP PHASE: Prepare the environment
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.GITHUB_TOKEN }}

  #     # CONFIGURATION: Set up Git user for automated commits
  #     - name: Setup Git
  #       run: |
  #         # Configure Git to use custom Melmua bot identity
  #         git config --global user.name "melmua-git-bot"
  #         git config --global user.email "melmua-git-bot@users.noreply.github.com"

  #     # DOWNLOAD ARTIFACTS: Get conversion data from previous job
  #     - name: Download conversion data
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: conversion-data
  #         path: .

  #     # FILE UPDATE LOGIC: Update all MD, JSON, YAML files with new AVIF references
  #     - name: Update file references
  #       run: |
  #         echo "Updating MD, JSON, and YAML files with new AVIF paths..."
          
  #         # DISCOVERY: Find all target files in the repository
  #         find . -type f \( -name "*.md" -o -name "*.json" -o -name "*.yaml" -o -name "*.yml" \) > target_files.txt
          
  #         echo "üìÅ Found files to update:"
  #         cat target_files.txt
          
  #         updated_files=""  # Track which files were modified
          
  #         # PROCESSING LOOP: Handle each converted image
  #         while IFS= read -r conversion; do
  #           # VALIDATION: Skip empty lines
  #           if [ -n "$conversion" ]; then
  #             # PARSING: Extract old and new paths from conversion mapping
  #             original_path=$(echo "$conversion" | cut -d'|' -f1)
  #             avif_path=$(echo "$conversion" | cut -d'|' -f2)
              
  #             # PATH NORMALIZATION: Remove leading ./ for clean relative paths
  #             original_relative_path=$(echo "$original_path" | sed 's|^\./||')
  #             avif_relative_path=$(echo "$avif_path" | sed 's|^\./||')
              
  #             echo "Updating references from $original_relative_path to $avif_relative_path"
              
  #             # FILE UPDATE LOOP: Process each target file
  #             while IFS= read -r target_file; do
  #               # VALIDATION: Ensure file exists
  #               if [ -f "$target_file" ]; then
  #                 # SEARCH AND REPLACE: Update image references with multiple patterns
  #                 file_updated=false
                  
  #                 # Pattern 1: Full relative path replacement
  #                 if grep -q "$original_relative_path" "$target_file"; then
  #                   sed -i "s|$original_relative_path|$avif_relative_path|g" "$target_file"
  #                   echo "‚úÖ Updated: $target_file (relative path replacement)"
  #                   file_updated=true
  #                 fi
                  
  #                 # Pattern 2: URL-embedded path replacement (for cases like https://domain.com/path/to/website/pages/...)
  #                 # This handles URLs that contain the relative path anywhere within them
  #                 if grep -qE "https?://[^/]+.*$original_relative_path" "$target_file"; then
  #                   sed -i "s|$original_relative_path|$avif_relative_path|g" "$target_file"
  #                   echo "‚úÖ Updated: $target_file (URL-embedded path replacement)"
  #                   file_updated=true
  #                 fi
                  
  #                 # Pattern 3: Filename-only replacement as final fallback
  #                 if [ "$file_updated" = false ]; then
  #                   original_filename=$(basename "$original_path")
  #                   avif_filename=$(basename "$avif_path")
  #                   if grep -q "$original_filename" "$target_file"; then
  #                     sed -i "s|$original_filename|$avif_filename|g" "$target_file"
  #                     echo "‚úÖ Updated: $target_file (filename-only replacement)"
  #                     file_updated=true
  #                   fi
  #                 fi
                  
  #                 # Track updated files
  #                 if [ "$file_updated" = true ]; then
  #                   updated_files="$updated_files $target_file"
  #                 fi
  #               fi
  #             done < target_files.txt
  #           fi
  #         done < converted_images.txt
          
  #         echo "üìù Updated files (MD/JSON/YAML): $updated_files"
          
  #         # CLEANUP: Remove temporary files
  #         echo "üßπ Cleaning up temporary files..."
  #         rm -f target_files.txt converted_images.txt
  #         echo "‚úÖ Temporary files cleaned up"

  # commit-changes:
  #   name: Commit & Push Changes to Main
  #   runs-on: ubuntu-latest
  #   needs: [setup-and-convert, update-file-references]
  #   if: needs.setup-and-convert.outputs.conversion_count > 0
    
  #   steps:
  #     # SETUP PHASE: Prepare the environment
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.GITHUB_TOKEN }}

  #     # CONFIGURATION: Set up Git user for automated commits
  #     - name: Setup Git
  #       run: |
  #         # Configure Git to use custom Melmua bot identity
  #         git config --global user.name "melmua-git-bot"
  #         git config --global user.email "melmua-git-bot@users.noreply.github.com"

  #     # GIT OPERATIONS: Commit and push changes to main branch
  #     - name: Commit changes to main
  #       run: |
  #         echo "Committing image optimization changes..."
          
  #         # STAGING: Add all changes, then remove temporary .txt files
  #         echo "üîç Adding all files to staging area..."
  #         git add .
          
  #         # Remove temporary .txt files from staging
  #         echo "üö´ Removing temporary files from staging:"
  #         git reset HEAD "*.txt" 2>/dev/null || true
  #         echo "‚úÖ Unstaged: *.txt files"
          
  #         echo "üìã Files excluded from commit:"
  #         echo "- images_to_convert.txt"
  #         echo "- converted_images.txt" 
  #         echo "- target_files.txt"
  #         echo "- all_release_branches.txt"
  #         echo "- sorted_branches.txt"
          
  #         # COMMIT LOGIC: Only commit if there are actually staged changes
  #         if git diff --staged --quiet; then
  #           echo "No changes to commit"
  #         else
  #           # COMMIT: Create descriptive commit message with conversion count
  #           git commit -m "feat: optimize images to AVIF format - Converted ${{ needs.setup-and-convert.outputs.conversion_count }} images to AVIF - Updated MD/JSON/YAML file references - Automated image optimization workflow"
            
  #           # PUSH: Update main branch with optimized images
  #           git push origin main
  #           echo "‚úÖ Changes pushed to main branch"
  #         fi

  # create-release:
  #   name: Create Release Branch
  #   runs-on: ubuntu-latest
  #   needs: [setup-and-convert, commit-changes]
  #   if: needs.setup-and-convert.outputs.conversion_count > 0
  #   outputs:
  #     branch_name: ${{ steps.create-branch.outputs.branch_name }}
    
  #   steps:
  #     # SETUP PHASE: Prepare the environment
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.GITHUB_TOKEN }}

  #     # CONFIGURATION: Set up Git user for automated commits
  #     - name: Setup Git
  #       run: |
  #         # Configure Git to use custom Melmua bot identity
  #         git config --global user.name "melmua-git-bot"
  #         git config --global user.email "melmua-git-bot@users.noreply.github.com"

  #     # RELEASE BRANCH CREATION: Create timestamped release branch
  #     - name: Create release branch
  #       id: create-branch
  #       run: |
  #         # TIMESTAMP GENERATION: Create unique branch name with date and epoch
  #         current_date=$(date +%d-%m-%y)    # Format: DD-MM-YY
  #         epoch_seconds=$(date +%s)         # Unix timestamp for uniqueness
  #         branch_name="release-${current_date}-${epoch_seconds}"
          
  #         echo "Creating release branch: $branch_name"
          
  #         # BRANCH OPERATIONS: Create and push new release branch from current state
  #         git checkout -b "$branch_name"
  #         git push origin "$branch_name"
          
  #         echo "‚úÖ Created and pushed release branch: $branch_name"
  #         # OUTPUT: Pass branch name to cleanup step
  #         echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

  # cleanup-old-releases:
  #   name: Cleanup Old Release Branches
  #   runs-on: ubuntu-latest
  #   needs: [setup-and-convert, create-release]
  #   if: needs.setup-and-convert.outputs.conversion_count > 0
    
  #   steps:
  #     # SETUP PHASE: Prepare the environment
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.GITHUB_TOKEN }}

  #     # CONFIGURATION: Set up Git user for automated commits
  #     - name: Setup Git
  #       run: |
  #         # Configure Git to use custom Melmua bot identity
  #         git config --global user.name "melmua-git-bot"
  #         git config --global user.email "melmua-git-bot@users.noreply.github.com"

  #     # MAINTENANCE: Clean up old release branches to prevent repository bloat
  #     - name: Cleanup old release branches
  #       run: |
  #         echo "Cleaning up old release branches..."
          
  #         # BRANCH DISCOVERY: Get all remote release branches
  #         git branch -r | grep "origin/release-" | sed 's|origin/||' | while read branch; do
  #           echo "$branch"
  #         done > all_release_branches.txt
          
  #         # SORTING LOGIC: Extract epoch timestamps and sort by age (newest first)
  #         while IFS= read -r branch; do
  #           # REGEX MATCHING: Extract epoch seconds from branch name pattern
  #           if [[ $branch =~ release-[0-9]{2}-[0-9]{2}-[0-9]{2}-([0-9]+)$ ]]; then
  #             epoch="${BASH_REMATCH[1]}"
  #             echo "$epoch:$branch"  # Format: timestamp:branch_name
  #           fi
  #         done < all_release_branches.txt | sort -nr > sorted_branches.txt
          
  #         # CLEANUP LOGIC: Keep only the 20 most recent branches, delete the rest
  #         # tail -n +21 gets all lines starting from line 21 (oldest branches)
  #         tail -n +21 sorted_branches.txt | while IFS=':' read -r epoch branch; do
  #           echo "üóëÔ∏è Deleting old release branch: $branch"
  #           # DELETE: Remove old branch from remote repository
  #           git push origin --delete "$branch" || echo "Failed to delete $branch"
  #         done
          
  #         echo "‚úÖ Cleanup completed - kept latest 20 release branches"
          
  #         # CLEANUP: Remove temporary files
  #         echo "üßπ Cleaning up temporary files..."
  #         rm -f all_release_branches.txt sorted_branches.txt
  #         echo "‚úÖ Temporary files cleaned up"

  build-docker-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      # SETUP PHASE: Prepare the environment
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # DOCKER BUILDX: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # GHCR AUTHENTICATION: Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # METADATA EXTRACTION: Extract metadata for proper tagging
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/ci-base
          tags: |
            type=raw,value=latest,enable=true
            type=sha,prefix=${{ github.sha }},suffix=-{{date 'DDMMYYYY-HHmmss'}}

      # BUILD AND PUSH: Build and push Docker image with caching
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/DockerfileCIBase
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.run_number }}
            VERSION=${{ github.sha }}

  # workflow-summary:
  #   name: Workflow Summary
  #   runs-on: ubuntu-latest
  #   needs: [setup-and-convert, update-file-references, commit-changes, create-release, cleanup-old-releases, build-docker-image]
  #   if: always()
    
  #   steps:
  #     # REPORTING: Provide summary of workflow execution
  #     - name: Summary
  #       run: |
  #         echo "üéâ Image Optimization Workflow Summary"
  #         echo "======================================"
          
  #         # CONDITIONAL REPORTING: Show different messages based on conversion results
  #         if [ "${{ needs.setup-and-convert.outputs.conversion_count }}" -gt 0 ]; then
  #           # SUCCESS CASE: Images were converted and processed
  #           echo "‚úÖ Images converted: ${{ needs.setup-and-convert.outputs.conversion_count }}"
  #           echo "‚úÖ File references updated (MD/JSON/YAML)"
  #           echo "‚úÖ Changes committed to main"
  #           echo "‚úÖ Release branch created"
  #           echo "‚úÖ Old branches cleaned up"
  #         else
  #           # NO-OP CASE: No images needed conversion
  #           echo "‚ÑπÔ∏è No images needed conversion"
  #         fi
          
  #         # DOCKER IMAGE REPORTING: Always show Docker build status
  #         echo ""
  #         echo "üê≥ Docker CI Base Image"
  #         echo "======================="
  #         echo "‚úÖ Docker image built and pushed to GitHub Container Registry"
  #         echo "üì¶ Registry: ghcr.io/${{ github.repository_owner }}/ci-base"
  #         echo "üèóÔ∏è Multi-platform: linux/amd64, linux/arm64"
  #         echo "üíæ Caching: GitHub Actions cache enabled"
  #         echo "üåê Public: Available as public container"
  #         echo ""
  #         echo "üí° To use the Docker image:"
  #         echo "   1. Pull: docker pull ghcr.io/${{ github.repository_owner }}/ci-base:latest"
  #         echo "   2. Run: docker run -it --rm ghcr.io/${{ github.repository_owner }}/ci-base:latest"